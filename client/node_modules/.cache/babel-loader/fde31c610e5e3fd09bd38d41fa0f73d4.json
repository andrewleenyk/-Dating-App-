{"ast":null,"code":"var _jsxFileName = \"/Users/drew/general_assembly/pawpaw/unit_4/week_12/WEB3-Blog/client/src/components/TextScramble/TextScramble.js\",\n    _s = $RefreshSig$();\n\nimport './TextScramble.css';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TextScramble() {\n  _s();\n\n  useEffect(() => {\n    class TextScramble {\n      constructor(el) {\n        this.el = el;\n        this.chars = \"!<>-_\\\\/[]{}—=+*^?#________\";\n        this.update = this.update.bind(this);\n      }\n\n      setText(newText) {\n        const oldText = this.el.innerText;\n        const length = Math.max(oldText.length, newText.length);\n        const promise = new Promise(resolve => this.resolve = resolve);\n        this.queue = [];\n\n        for (let i = 0; i < length; i++) {\n          const from = oldText[i] || \"\";\n          const to = newText[i] || \"\";\n          const start = Math.floor(Math.random() * 40);\n          const end = start + Math.floor(Math.random() * 40);\n          this.queue.push({\n            from,\n            to,\n            start,\n            end\n          });\n        }\n\n        cancelAnimationFrame(this.frameRequest);\n        this.frame = 0;\n        this.update();\n        return promise;\n      }\n\n      update() {\n        let output = \"\";\n        let complete = 0;\n\n        for (let i = 0, n = this.queue.length; i < n; i++) {\n          let {\n            from,\n            to,\n            start,\n            end,\n            char\n          } = this.queue[i];\n\n          if (this.frame >= end) {\n            complete++;\n            output += to;\n          } else if (this.frame >= start) {\n            if (!char || Math.random() < 0.28) {\n              char = this.randomChar();\n              this.queue[i].char = char;\n            }\n\n            output += `<span class=\"dud\">${char}</span>`;\n          } else {\n            output += from;\n          }\n        }\n\n        this.el.innerHTML = output;\n\n        if (complete === this.queue.length) {\n          this.resolve();\n        } else {\n          this.frameRequest = requestAnimationFrame(this.update);\n          this.frame++;\n        }\n      }\n\n      randomChar() {\n        return this.chars[Math.floor(Math.random() * this.chars.length)];\n      }\n\n    } // ——————————————————————————————————————————————————\n    // Example\n    // ——————————————————————————————————————————————————\n\n\n    const phrases1 = [\"Neo,\", \"sooner or later\", \"you're going to realize\", \"just as I did\", \"that there's a difference\", \"between knowing the path\", \"and walking the path\"];\n    const phrases2 = [\"The Daily Node,\", \"the blog about\", \"decentralization\", \"and new tech\", \"relating to WEB3\", \", blockchain technology\", \",and decentralized finance\"];\n    const phrases = [\"decentralization\", \"web3\", \"cryptocurrency\", \"virtual reality\", \"space\", \"tokenization\"];\n    const phrases4 = [\"decentralization\"];\n    const el = document.querySelector(\".text\");\n    const fx = new TextScramble(el);\n    let counter = 0;\n\n    const next = () => {\n      fx.setText(phrases[counter]).then(() => {\n        setTimeout(next, 800);\n      });\n      counter = (counter + 1) % phrases.length;\n    };\n\n    next();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TextScramble, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = TextScramble;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextScramble\");","map":{"version":3,"sources":["/Users/drew/general_assembly/pawpaw/unit_4/week_12/WEB3-Blog/client/src/components/TextScramble/TextScramble.js"],"names":["useEffect","TextScramble","constructor","el","chars","update","bind","setText","newText","oldText","innerText","length","Math","max","promise","Promise","resolve","queue","i","from","to","start","floor","random","end","push","cancelAnimationFrame","frameRequest","frame","output","complete","n","char","randomChar","innerHTML","requestAnimationFrame","phrases1","phrases2","phrases","phrases4","document","querySelector","fx","counter","next","then","setTimeout"],"mappings":"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","sourcesContent":["import './TextScramble.css'\nimport { useEffect } from 'react';\nexport default function TextScramble() {\n\n    useEffect(() => {\n\n\nclass TextScramble {\n    constructor(el) {\n      this.el = el;\n      this.chars = \"!<>-_\\\\/[]{}—=+*^?#________\";\n      this.update = this.update.bind(this);\n    }\n    setText(newText) {\n      const oldText = this.el.innerText;\n      const length = Math.max(oldText.length, newText.length);\n      const promise = new Promise((resolve) => (this.resolve = resolve));\n      this.queue = [];\n      for (let i = 0; i < length; i++) {\n        const from = oldText[i] || \"\";\n        const to = newText[i] || \"\";\n        const start = Math.floor(Math.random() * 40);\n        const end = start + Math.floor(Math.random() * 40);\n        this.queue.push({ from, to, start, end });\n      }\n      cancelAnimationFrame(this.frameRequest);\n      this.frame = 0;\n      this.update();\n      return promise;\n    }\n    update() {\n      let output = \"\";\n      let complete = 0;\n      for (let i = 0, n = this.queue.length; i < n; i++) {\n        let { from, to, start, end, char } = this.queue[i];\n        if (this.frame >= end) {\n          complete++;\n          output += to;\n        } else if (this.frame >= start) {\n          if (!char || Math.random() < 0.28) {\n            char = this.randomChar();\n            this.queue[i].char = char;\n          }\n          output += `<span class=\"dud\">${char}</span>`;\n        } else {\n          output += from;\n        }\n      }\n      this.el.innerHTML = output;\n      if (complete === this.queue.length) {\n        this.resolve();\n      } else {\n        this.frameRequest = requestAnimationFrame(this.update);\n        this.frame++;\n      }\n    }\n    randomChar() {\n      return this.chars[Math.floor(Math.random() * this.chars.length)];\n    }\n  }\n  \n  // ——————————————————————————————————————————————————\n  // Example\n  // ——————————————————————————————————————————————————\n  \n  const phrases1 = [\n    \"Neo,\",\n    \"sooner or later\",\n    \"you're going to realize\",\n    \"just as I did\",\n    \"that there's a difference\",\n    \"between knowing the path\",\n    \"and walking the path\"\n  ];\n  \n  const phrases2 = [\n    \"The Daily Node,\",\n    \"the blog about\",\n    \"decentralization\",\n    \"and new tech\",\n    \"relating to WEB3\",\n    \", blockchain technology\",\n    \",and decentralized finance\"\n  ];\n  const phrases = [\n    \"decentralization\",\n    \"web3\",\n    \"cryptocurrency\",\n    \"virtual reality\",\n    \"space\",\n    \"tokenization\"\n  ];\n  const phrases4 = [\n    \"decentralization\"\n  ];\n\n  const el = document.querySelector(\".text\");\n  const fx = new TextScramble(el);\n  \n  let counter = 0;\n  const next = () => {\n    fx.setText(phrases[counter]).then(() => {\n      setTimeout(next, 800);\n    });\n    counter = (counter + 1) % phrases.length;\n  };\n  \n  next();\n\n});\n\n  return (\n    <div class=\"container\">\n        <div class=\"text\"></div>\n    </div>\n  )\n\n}"]},"metadata":{},"sourceType":"module"}