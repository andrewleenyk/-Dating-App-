{"ast":null,"code":"var _jsxFileName = \"/Users/drew/general_assembly/pawpaw/unit_4/week_12/WEB3-Blog/client/src/components/threejs/three.js\";\nimport React from 'react'; //import { } from 'react-router-dom';\n\nimport { AmbientLight, Color, DynamicDrawUsage, InstancedBufferAttribute, InstancedMesh, MathUtils, Mesh, MeshPhongMaterial, Object3D, Scene, SphereBufferGeometry, SpotLight, Vector3 } from 'https://unpkg.com/three@0.120.0/build/three.module.js';\nimport useThree from 'https://codepen.io/soju22/pen/cb31020fed766eb66bc8ad1879bc3325.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThreeJS() {\n  const {\n    randFloat: rnd,\n    randFloatSpread: rndFS\n  } = MathUtils;\n  App();\n\n  function App() {\n    var _s = $RefreshSig$();\n\n    let three, scene;\n    let cannon, iMesh;\n    const target = new Vector3();\n    let sphere, light1, light2;\n    init();\n\n    function init() {\n      _s();\n\n      three = useThree().init({\n        canvas: document.getElementById('canvas'),\n        camera_fov: 50,\n        camera_pos: new Vector3(0, 0, 25),\n        camera_ctrl: {\n          enableDamping: true,\n          dampingFactor: 0.05\n        },\n        mouse_move: true,\n        mouse_raycast: true\n      });\n      three.renderer.shadowMap.enabled = true;\n      cannon = useCannon();\n      initScene();\n      animate();\n    }\n\n    _s(init, \"5SfdaLx0sVAodWH3jgllYXHkwa0=\", false, function () {\n      return [useThree, useCannon];\n    });\n\n    function initScene() {\n      scene = new Scene();\n      scene.background = new Color(0xffffff);\n      scene.add(new AmbientLight(0x808080));\n      light1 = new SpotLight(0xffffff, 0.5, 0, Math.PI / 8, 0.1);\n      light1.position.set(0, 20, 50);\n      light1.castShadow = true;\n      light1.shadow.mapSize.width = 2048;\n      light1.shadow.mapSize.height = 2048;\n      scene.add(light1);\n      scene.add(light1.target);\n      light2 = new SpotLight(0xff0000, 0.5, 0, Math.PI / 8, 0.1);\n      light2.position.set(0, -20, 50);\n      light2.castShadow = true;\n      light2.shadow.mapSize.width = 2048;\n      light2.shadow.mapSize.height = 2048;\n      scene.add(light2);\n      scene.add(light2.target);\n      sphere = new Mesh(new SphereBufferGeometry(5, 24, 24), new MeshPhongMaterial({\n        color: 0xffffff\n      }));\n      sphere.receiveShadow = true;\n      scene.add(sphere);\n      cannon.addMesh(sphere);\n      initInstancedMesh();\n    }\n\n    function initInstancedMesh() {\n      const geometry = new SphereBufferGeometry(1, 16, 16); // const geometry = new BoxBufferGeometry(1, 1, 1);\n\n      const material = new MeshPhongMaterial({\n        color: 0xffffff,\n        vertexColors: true\n      });\n      iMesh = new InstancedMesh(geometry, material, 200);\n      iMesh.instanceMatrix.setUsage(DynamicDrawUsage);\n      iMesh.mass = 0.1;\n      iMesh.castShadow = true;\n      iMesh.receiveShadow = true; // instance matrix\n\n      const dummy = new Object3D();\n      iMesh.scales = new Float32Array(iMesh.count);\n\n      for (let i = 0; i < iMesh.count; i++) {\n        dummy.position.set(rndFS(40), rndFS(40), rndFS(40));\n        dummy.updateMatrix();\n        iMesh.setMatrixAt(i, dummy.matrix);\n        iMesh.scales[i] = rnd(0.25, 1);\n      } // colors\n\n\n      const cscale = chroma.scale([0xffffff, 0xc5777c, 0x437b7f]);\n      iMesh.cscale = cscale;\n      const colors = [];\n\n      for (let i = 0; i < iMesh.count; i++) {\n        const color = new Color(cscale(rnd(0, 1)).hex());\n        colors.push(color.r, color.g, color.b);\n      }\n\n      iMesh.geometry.setAttribute('color', new InstancedBufferAttribute(new Float32Array(colors), 3));\n      scene.add(iMesh);\n      cannon.addMesh(iMesh); // custom gravity\n\n      const v = new Vector3();\n      iMesh.bodies.forEach(body => {\n        body.preStep = () => {\n          v.copy(target).sub(body.position).normalize().multiplyScalar(0.5);\n          v.clampScalar(-0.5, 0.5);\n          body.force.copy(v);\n        };\n      });\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      target.copy(three.mouseV3);\n      cannon.step();\n      render();\n    }\n\n    function render() {\n      const {\n        renderer,\n        camera,\n        cameraCtrl\n      } = three;\n      if (cameraCtrl) cameraCtrl.update();\n      renderer.render(scene, camera);\n    }\n  }\n  /**\n   * From https://github.com/mrdoob/three.js/blob/master/examples/jsm/physics/CannonPhysics.js\n   */\n\n\n  function useCannon() {\n    const world = new CANNON.World();\n    world.gravity.set(0, 0, 0); // world.broadphase = new CANNON.SAPBroadphase(world);\n\n    world.broadphase = new CANNON.NaiveBroadphase();\n    world.solver.iterations = 20;\n    const meshes = [];\n    const obj = {\n      world,\n      addMesh,\n      step\n    };\n\n    function addMesh(mesh) {\n      const shape = getShape(mesh.geometry);\n\n      if (shape) {\n        if (mesh.isInstancedMesh) {\n          handleInstancedMesh(mesh, shape);\n        } else if (mesh.isMesh) {\n          handleMesh(mesh, shape);\n        }\n      }\n    }\n\n    function step(mesh) {\n      world.step(1 / 60);\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        const mesh = meshes[i];\n\n        if (mesh.isInstancedMesh) {\n          const iMatrix = mesh.instanceMatrix.array;\n          const bodies = mesh.bodies;\n\n          for (let j = 0; j < bodies.length; j++) {\n            const body = bodies[j];\n            compose(body.position, body.quaternion, mesh.scales[j], iMatrix, j * 16);\n          }\n\n          mesh.instanceMatrix.needsUpdate = true;\n        } else if (mesh.isMesh) {\n          mesh.position.copy(mesh.body.position);\n          mesh.quaternion.copy(mesh.body.quaternion);\n        }\n      }\n    }\n\n    ;\n\n    function getShape(geometry) {\n      const parameters = geometry.parameters;\n\n      switch (geometry.type) {\n        case 'BoxBufferGeometry':\n          const boxParams = new CANNON.Vec3();\n          boxParams.x = parameters.width / 2;\n          boxParams.y = parameters.height / 2;\n          boxParams.z = parameters.depth / 2;\n          return new CANNON.Box(boxParams);\n\n        case 'PlaneBufferGeometry':\n          return new CANNON.Plane();\n\n        case 'SphereBufferGeometry':\n          return new CANNON.Sphere(parameters.radius);\n\n        case 'CylinderBufferGeometry':\n          return new CANNON.Cylinder(parameters.radiusTop, parameters.radiusBottom, parameters.height, parameters.radialSegments);\n      }\n\n      return null;\n    }\n\n    ;\n\n    function handleMesh(mesh, shape) {\n      const position = new CANNON.Vec3();\n      position.copy(mesh.position);\n      const quaternion = new CANNON.Quaternion();\n      quaternion.copy(mesh.quaternion);\n      const body = new CANNON.Body({\n        position,\n        quaternion,\n        mass: mesh.mass,\n        shape\n      });\n      world.addBody(body);\n\n      if (mesh.mass > 0) {\n        mesh.body = body;\n        meshes.push(mesh);\n      }\n    }\n\n    ;\n\n    function handleInstancedMesh(mesh, shape) {\n      const iMatrix = mesh.instanceMatrix.array;\n      const bodies = [];\n\n      for (let i = 0; i < mesh.count; i++) {\n        const index = i * 16;\n        const position = new CANNON.Vec3();\n        position.set(iMatrix[index + 12], iMatrix[index + 13], iMatrix[index + 14]); // handle instance scale\n\n        const scale = mesh.scales[i];\n        const geoParams = mesh.geometry.parameters;\n\n        if (mesh.geometry.type === 'SphereBufferGeometry') {\n          shape = new CANNON.Sphere(scale * geoParams.radius);\n        } else if (mesh.geometry.type === 'BoxBufferGeometry') {\n          shape = new CANNON.Box(new CANNON.Vec3(scale * geoParams.width / 2, scale * geoParams.height / 2, scale * geoParams.depth / 2));\n        }\n\n        const mass = scale * mesh.mass;\n        const damping = 0.1; // mass * 0.1;\n\n        const body = new CANNON.Body({\n          position,\n          mass,\n          shape,\n          linearDamping: damping,\n          angularDamping: damping\n        });\n        world.addBody(body);\n        bodies.push(body);\n      }\n\n      if (mesh.mass > 0) {\n        mesh.bodies = bodies;\n        meshes.push(mesh);\n      }\n    }\n\n    ;\n\n    function compose(position, quaternion, scale, iMatrix, index) {\n      const x = quaternion.x,\n            y = quaternion.y,\n            z = quaternion.z,\n            w = quaternion.w;\n      const x2 = x + x,\n            y2 = y + y,\n            z2 = z + z;\n      const xx = x * x2,\n            xy = x * y2,\n            xz = x * z2;\n      const yy = y * y2,\n            yz = y * z2,\n            zz = z * z2;\n      const wx = w * x2,\n            wy = w * y2,\n            wz = w * z2;\n      iMatrix[index + 0] = (1 - (yy + zz)) * scale;\n      iMatrix[index + 1] = (xy + wz) * scale;\n      iMatrix[index + 2] = (xz - wy) * scale;\n      iMatrix[index + 3] = 0;\n      iMatrix[index + 4] = (xy - wz) * scale;\n      iMatrix[index + 5] = (1 - (xx + zz)) * scale;\n      iMatrix[index + 6] = (yz + wx) * scale;\n      iMatrix[index + 7] = 0;\n      iMatrix[index + 8] = (xz + wy) * scale;\n      iMatrix[index + 9] = (yz - wx) * scale;\n      iMatrix[index + 10] = (1 - (xx + yy)) * scale;\n      iMatrix[index + 11] = 0;\n      iMatrix[index + 12] = position.x;\n      iMatrix[index + 13] = position.y;\n      iMatrix[index + 14] = position.z;\n      iMatrix[index + 15] = 1;\n    }\n\n    return obj;\n  }\n\n  Resources;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      class: \"collection\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://codepen.io/collection/AGZywR\",\n        target: \"_blank\",\n        children: \"WebGL Collection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 7\n  }, this);\n}\n_c = ThreeJS;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeJS\");","map":{"version":3,"sources":["/Users/drew/general_assembly/pawpaw/unit_4/week_12/WEB3-Blog/client/src/components/threejs/three.js"],"names":["React","AmbientLight","Color","DynamicDrawUsage","InstancedBufferAttribute","InstancedMesh","MathUtils","Mesh","MeshPhongMaterial","Object3D","Scene","SphereBufferGeometry","SpotLight","Vector3","useThree","ThreeJS","randFloat","rnd","randFloatSpread","rndFS","App","three","scene","cannon","iMesh","target","sphere","light1","light2","init","canvas","document","getElementById","camera_fov","camera_pos","camera_ctrl","enableDamping","dampingFactor","mouse_move","mouse_raycast","renderer","shadowMap","enabled","useCannon","initScene","animate","background","add","Math","PI","position","set","castShadow","shadow","mapSize","width","height","color","receiveShadow","addMesh","initInstancedMesh","geometry","material","vertexColors","instanceMatrix","setUsage","mass","dummy","scales","Float32Array","count","i","updateMatrix","setMatrixAt","matrix","cscale","chroma","scale","colors","hex","push","r","g","b","setAttribute","v","bodies","forEach","body","preStep","copy","sub","normalize","multiplyScalar","clampScalar","force","requestAnimationFrame","mouseV3","step","render","camera","cameraCtrl","update","world","CANNON","World","gravity","broadphase","NaiveBroadphase","solver","iterations","meshes","obj","mesh","shape","getShape","isInstancedMesh","handleInstancedMesh","isMesh","handleMesh","l","length","iMatrix","array","j","compose","quaternion","needsUpdate","parameters","type","boxParams","Vec3","x","y","z","depth","Box","Plane","Sphere","radius","Cylinder","radiusTop","radiusBottom","radialSegments","Quaternion","Body","addBody","index","geoParams","damping","linearDamping","angularDamping","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","Resources"],"mappings":"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","sourcesContent":["import React from 'react';\n//import { } from 'react-router-dom';\nimport {\n    AmbientLight,\n    Color,\n    DynamicDrawUsage,\n    InstancedBufferAttribute,\n    InstancedMesh,\n    MathUtils,\n    Mesh,\n    MeshPhongMaterial,\n    Object3D,\n    Scene,\n    SphereBufferGeometry,\n    SpotLight,\n    Vector3,\n  } from 'https://unpkg.com/three@0.120.0/build/three.module.js';\n  \n  import useThree from 'https://codepen.io/soju22/pen/cb31020fed766eb66bc8ad1879bc3325.js';\n  \nexport default function ThreeJS() {\n\n      \n      const { randFloat: rnd, randFloatSpread: rndFS } = MathUtils;\n      \n      App();\n      \n      function App() {\n        let three, scene;\n        let cannon, iMesh;\n      \n        const target = new Vector3();\n        let sphere, light1, light2;\n      \n        init();\n        \n      \n        function init() {\n          three = useThree().init({\n            canvas: document.getElementById('canvas'),\n            camera_fov: 50,\n            camera_pos: new Vector3(0, 0, 25),\n            camera_ctrl: {\n              enableDamping: true,\n              dampingFactor: 0.05,\n            },\n            mouse_move: true,\n            mouse_raycast: true,\n          });\n          three.renderer.shadowMap.enabled = true;\n      \n          cannon = useCannon();\n      \n          initScene();\n          animate();\n        }\n      \n        function initScene() {\n          scene = new Scene();\n      \n          scene.background = new Color(0xffffff);\n          scene.add(new AmbientLight(0x808080));\n      \n          light1 = new SpotLight(0xffffff, 0.5, 0, Math.PI / 8, 0.1);\n          light1.position.set(0, 20, 50);\n          light1.castShadow = true;\n          light1.shadow.mapSize.width = 2048;\n          light1.shadow.mapSize.height = 2048;\n          scene.add(light1);\n          scene.add(light1.target);\n      \n          light2 = new SpotLight(0xff0000, 0.5, 0, Math.PI / 8, 0.1);\n          light2.position.set(0, -20, 50);\n          light2.castShadow = true;\n          light2.shadow.mapSize.width = 2048;\n          light2.shadow.mapSize.height = 2048;\n          scene.add(light2);\n          scene.add(light2.target);\n      \n          sphere = new Mesh(\n            new SphereBufferGeometry(5, 24, 24),\n            new MeshPhongMaterial({ color: 0xffffff })\n          );\n          sphere.receiveShadow = true;\n          scene.add(sphere);\n          cannon.addMesh(sphere);\n      \n          initInstancedMesh();\n        }\n      \n        function initInstancedMesh() {\n          const geometry = new SphereBufferGeometry(1, 16, 16);\n          // const geometry = new BoxBufferGeometry(1, 1, 1);\n          const material = new MeshPhongMaterial({ color: 0xffffff, vertexColors: true });\n          iMesh = new InstancedMesh(geometry, material, 200);\n          iMesh.instanceMatrix.setUsage(DynamicDrawUsage);\n          iMesh.mass = 0.1;\n      \n          iMesh.castShadow = true;\n          iMesh.receiveShadow = true;\n      \n          // instance matrix\n          const dummy = new Object3D();\n          iMesh.scales = new Float32Array(iMesh.count);\n          for (let i = 0; i < iMesh.count; i++) {\n            dummy.position.set(rndFS(40), rndFS(40), rndFS(40));\n            dummy.updateMatrix();\n            iMesh.setMatrixAt(i, dummy.matrix);\n            iMesh.scales[i] = rnd(0.25, 1);\n          }\n      \n          // colors\n          const cscale = chroma.scale([0xffffff, 0xc5777c, 0x437b7f]);\n          iMesh.cscale = cscale;\n          const colors = [];\n          for (let i = 0; i < iMesh.count; i++) {\n            const color = new Color(cscale(rnd(0, 1)).hex());\n            colors.push(color.r, color.g, color.b);\n          }\n          iMesh.geometry.setAttribute('color', new InstancedBufferAttribute(new Float32Array(colors), 3));\n      \n          scene.add(iMesh);\n          cannon.addMesh(iMesh);\n      \n          // custom gravity\n          const v = new Vector3();\n          iMesh.bodies.forEach(body => {\n            body.preStep = () => {\n              v.copy(target).sub(body.position).normalize().multiplyScalar(0.5);\n              v.clampScalar(-0.5, 0.5);\n              body.force.copy(v);\n            };\n          });\n        }\n      \n        function animate() {\n          requestAnimationFrame(animate);\n          target.copy(three.mouseV3);\n          cannon.step();\n          render();\n        }\n      \n        function render() {\n          const { renderer, camera, cameraCtrl } = three;\n          if (cameraCtrl) cameraCtrl.update();\n          renderer.render(scene, camera);\n        }\n      }\n      \n      /**\n       * From https://github.com/mrdoob/three.js/blob/master/examples/jsm/physics/CannonPhysics.js\n       */\n      function useCannon() {\n        const world = new CANNON.World();\n        world.gravity.set(0, 0, 0);\n        // world.broadphase = new CANNON.SAPBroadphase(world);\n        world.broadphase = new CANNON.NaiveBroadphase();\n        world.solver.iterations = 20;\n      \n        const meshes = [];\n      \n        const obj = {\n          world,\n          addMesh,\n          step,\n        };\n      \n        function addMesh(mesh) {\n          const shape = getShape(mesh.geometry);\n          if (shape) {\n            if (mesh.isInstancedMesh) {\n              handleInstancedMesh(mesh, shape);\n            } else if (mesh.isMesh) {\n              handleMesh(mesh, shape);\n            }\n          }\n        }\n      \n        function step(mesh) {\n          world.step(1 / 60);\n          for (let i = 0, l = meshes.length; i < l; i++) {\n            const mesh = meshes[i];\n            if (mesh.isInstancedMesh) {\n              const iMatrix = mesh.instanceMatrix.array;\n              const bodies = mesh.bodies;\n              for (let j = 0; j < bodies.length; j++) {\n                const body = bodies[j];\n                compose(body.position, body.quaternion, mesh.scales[j], iMatrix, j * 16);\n              }\n              mesh.instanceMatrix.needsUpdate = true;\n            } else if (mesh.isMesh) {\n              mesh.position.copy(mesh.body.position);\n              mesh.quaternion.copy(mesh.body.quaternion);\n            }\n          }\n        };\n      \n        function getShape(geometry) {\n          const parameters = geometry.parameters;\n          switch (geometry.type) {\n            case 'BoxBufferGeometry':\n              const boxParams = new CANNON.Vec3();\n              boxParams.x = parameters.width / 2;\n              boxParams.y = parameters.height / 2;\n              boxParams.z = parameters.depth / 2;\n              return new CANNON.Box(boxParams);\n      \n            case 'PlaneBufferGeometry':\n              return new CANNON.Plane();\n      \n            case 'SphereBufferGeometry':\n              return new CANNON.Sphere(parameters.radius);\n      \n            case 'CylinderBufferGeometry':\n              return new CANNON.Cylinder(parameters.radiusTop, parameters.radiusBottom, parameters.height, parameters.radialSegments);\n          }\n          return null;\n        };\n      \n        function handleMesh(mesh, shape) {\n          const position = new CANNON.Vec3();\n          position.copy(mesh.position);\n      \n          const quaternion = new CANNON.Quaternion();\n          quaternion.copy(mesh.quaternion);\n      \n          const body = new CANNON.Body({ position, quaternion, mass: mesh.mass, shape });\n          world.addBody(body);\n      \n          if (mesh.mass > 0) {\n            mesh.body = body;\n            meshes.push(mesh);\n          }\n        };\n      \n        function handleInstancedMesh(mesh, shape) {\n          const iMatrix = mesh.instanceMatrix.array;\n          const bodies = [];\n          for (let i = 0; i < mesh.count; i++) {\n            const index = i * 16;\n      \n            const position = new CANNON.Vec3();\n            position.set(iMatrix[index + 12], iMatrix[index + 13], iMatrix[index + 14]);\n      \n            // handle instance scale\n            const scale = mesh.scales[i];\n            const geoParams = mesh.geometry.parameters;\n            if (mesh.geometry.type === 'SphereBufferGeometry') {\n              shape = new CANNON.Sphere(scale * geoParams.radius);\n            } else if (mesh.geometry.type === 'BoxBufferGeometry') {\n              shape = new CANNON.Box(new CANNON.Vec3(\n                scale * geoParams.width / 2,\n                scale * geoParams.height / 2,\n                scale * geoParams.depth / 2\n              ));\n            }\n            const mass = scale * mesh.mass;\n            const damping = 0.1; // mass * 0.1;\n            const body = new CANNON.Body({ position, mass, shape, linearDamping: damping, angularDamping: damping });\n      \n            world.addBody(body);\n            bodies.push(body);\n          }\n      \n          if (mesh.mass > 0) {\n            mesh.bodies = bodies;\n            meshes.push(mesh);\n          }\n        };\n      \n        function compose(position, quaternion, scale, iMatrix, index) {\n          const x = quaternion.x, y = quaternion.y, z = quaternion.z, w = quaternion.w;\n          const x2 = x + x, y2 = y + y, z2 = z + z;\n          const xx = x * x2, xy = x * y2, xz = x * z2;\n          const yy = y * y2, yz = y * z2, zz = z * z2;\n          const wx = w * x2, wy = w * y2, wz = w * z2;\n      \n          iMatrix[index + 0] = (1 - (yy + zz)) * scale;\n          iMatrix[index + 1] = (xy + wz) * scale;\n          iMatrix[index + 2] = (xz - wy) * scale;\n          iMatrix[index + 3] = 0;\n      \n          iMatrix[index + 4] = (xy - wz) * scale;\n          iMatrix[index + 5] = (1 - (xx + zz)) * scale;\n          iMatrix[index + 6] = (yz + wx) * scale;\n          iMatrix[index + 7] = 0;\n      \n          iMatrix[index + 8] = (xz + wy) * scale;\n          iMatrix[index + 9] = (yz - wx) * scale;\n          iMatrix[index + 10] = (1 - (xx + yy)) * scale;\n          iMatrix[index + 11] = 0;\n      \n          iMatrix[index + 12] = position.x;\n          iMatrix[index + 13] = position.y;\n          iMatrix[index + 14] = position.z;\n          iMatrix[index + 15] = 1;\n        }\n      \n        return obj;\n      }\n      \n      Resources\n  return (\n      <div>\n          <canvas id=\"canvas\"></canvas>\n\n<p class=\"collection\">\n<a href=\"https://codepen.io/collection/AGZywR\" target=\"_blank\">WebGL Collection</a>\n</p>\n      </div>\n    \n  )\n}\n"]},"metadata":{},"sourceType":"module"}