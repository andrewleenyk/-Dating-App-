{"ast":null,"code":"var _jsxFileName = \"/Users/drew/general_assembly/pawpaw/unit_4/week_12/WEB3-Blog/client/src/components/Nav/TextScramble/TextScramble.js\";\nimport './TextScramble.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TextScramble() {\n  class TextScramble {\n    constructor(el) {\n      this.el = el;\n      this.chars = \"!<>-_\\\\/[]{}—=+*^?#________\";\n      this.update = this.update.bind(this);\n    }\n\n    setText(newText) {\n      const oldText = this.el.innerText;\n      const length = Math.max(oldText.length, newText.length);\n      const promise = new Promise(resolve => this.resolve = resolve);\n      this.queue = [];\n\n      for (let i = 0; i < length; i++) {\n        const from = oldText[i] || \"\";\n        const to = newText[i] || \"\";\n        const start = Math.floor(Math.random() * 40);\n        const end = start + Math.floor(Math.random() * 40);\n        this.queue.push({\n          from,\n          to,\n          start,\n          end\n        });\n      }\n\n      cancelAnimationFrame(this.frameRequest);\n      this.frame = 0;\n      this.update();\n      return promise;\n    }\n\n    update() {\n      let output = \"\";\n      let complete = 0;\n\n      for (let i = 0, n = this.queue.length; i < n; i++) {\n        let {\n          from,\n          to,\n          start,\n          end,\n          char\n        } = this.queue[i];\n\n        if (this.frame >= end) {\n          complete++;\n          output += to;\n        } else if (this.frame >= start) {\n          if (!char || Math.random() < 0.28) {\n            char = this.randomChar();\n            this.queue[i].char = char;\n          }\n\n          output += `<span class=\"dud\">${char}</span>`;\n        } else {\n          output += from;\n        }\n      }\n\n      this.el.innerHTML = output;\n\n      if (complete === this.queue.length) {\n        this.resolve();\n      } else {\n        this.frameRequest = requestAnimationFrame(this.update);\n        this.frame++;\n      }\n    }\n\n    randomChar() {\n      return this.chars[Math.floor(Math.random() * this.chars.length)];\n    }\n\n  } // ——————————————————————————————————————————————————\n  // Example\n  // ——————————————————————————————————————————————————\n\n\n  const phrases = [\"Neo,\", \"sooner or later\", \"you're going to realize\", \"just as I did\", \"that there's a difference\", \"between knowing the path\", \"and walking the path\"];\n  const el = document.querySelector(\".text\");\n  const fx = new TextScramble(el);\n  let counter = 0;\n\n  const next = () => {\n    fx.setText(phrases[counter]).then(() => {\n      setTimeout(next, 800);\n    });\n    counter = (counter + 1) % phrases.length;\n  };\n\n  next();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_c = TextScramble;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextScramble\");","map":{"version":3,"sources":["/Users/drew/general_assembly/pawpaw/unit_4/week_12/WEB3-Blog/client/src/components/Nav/TextScramble/TextScramble.js"],"names":["TextScramble","constructor","el","chars","update","bind","setText","newText","oldText","innerText","length","Math","max","promise","Promise","resolve","queue","i","from","to","start","floor","random","end","push","cancelAnimationFrame","frameRequest","frame","output","complete","n","char","randomChar","innerHTML","requestAnimationFrame","phrases","document","querySelector","fx","counter","next","then","setTimeout"],"mappings":"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","sourcesContent":["import './TextScramble.css'\nexport default function TextScramble() {\n\nclass TextScramble {\n    constructor(el) {\n      this.el = el;\n      this.chars = \"!<>-_\\\\/[]{}—=+*^?#________\";\n      this.update = this.update.bind(this);\n    }\n    setText(newText) {\n      const oldText = this.el.innerText;\n      const length = Math.max(oldText.length, newText.length);\n      const promise = new Promise((resolve) => (this.resolve = resolve));\n      this.queue = [];\n      for (let i = 0; i < length; i++) {\n        const from = oldText[i] || \"\";\n        const to = newText[i] || \"\";\n        const start = Math.floor(Math.random() * 40);\n        const end = start + Math.floor(Math.random() * 40);\n        this.queue.push({ from, to, start, end });\n      }\n      cancelAnimationFrame(this.frameRequest);\n      this.frame = 0;\n      this.update();\n      return promise;\n    }\n    update() {\n      let output = \"\";\n      let complete = 0;\n      for (let i = 0, n = this.queue.length; i < n; i++) {\n        let { from, to, start, end, char } = this.queue[i];\n        if (this.frame >= end) {\n          complete++;\n          output += to;\n        } else if (this.frame >= start) {\n          if (!char || Math.random() < 0.28) {\n            char = this.randomChar();\n            this.queue[i].char = char;\n          }\n          output += `<span class=\"dud\">${char}</span>`;\n        } else {\n          output += from;\n        }\n      }\n      this.el.innerHTML = output;\n      if (complete === this.queue.length) {\n        this.resolve();\n      } else {\n        this.frameRequest = requestAnimationFrame(this.update);\n        this.frame++;\n      }\n    }\n    randomChar() {\n      return this.chars[Math.floor(Math.random() * this.chars.length)];\n    }\n  }\n  \n  // ——————————————————————————————————————————————————\n  // Example\n  // ——————————————————————————————————————————————————\n  \n  const phrases = [\n    \"Neo,\",\n    \"sooner or later\",\n    \"you're going to realize\",\n    \"just as I did\",\n    \"that there's a difference\",\n    \"between knowing the path\",\n    \"and walking the path\"\n  ];\n  \n  const el = document.querySelector(\".text\");\n  const fx = new TextScramble(el);\n  \n  let counter = 0;\n  const next = () => {\n    fx.setText(phrases[counter]).then(() => {\n      setTimeout(next, 800);\n    });\n    counter = (counter + 1) % phrases.length;\n  };\n  \n  next();\n  \n\n  return (\n    <div class=\"container\">\n        <div class=\"text\"></div>\n    </div>\n  )\n\n}"]},"metadata":{},"sourceType":"module"}